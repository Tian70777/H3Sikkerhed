@inject HttpClient Http
@inject NavigationManager Navigation

@code {
    // Fields to hold data
    private List<string> algorithms = new List<string>();
    private string selectedAlgorithm;
    private string plainText = "";
    private string cipherText = "";
    private string decryptedPlainText = "";
    private string key = "";
    private string iv = "";
    private string encryptionTimeMs;
    private string decryptionTimeMs;

    // 1) OnInitializedAsync: Get the list of crypto methods from the API
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // // Calls GET /api/crypto/methods
            algorithms = await Http.GetFromJsonAsync<List<string>>("api/crypto/methods");

            if (algorithms?.Count > 0)
            {
                selectedAlgorithm = algorithms[0]; // default selection
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching algorithms: {ex.Message}");
        }
    }

    // 2) Generate Key & IV for the selected algorithm
    private async Task GenerateKeyAndIV()
    {
        try
        {
            // Calls GET /api/crypto/generateKeyIV?methodName=...
            var response = await Http.GetFromJsonAsync<GenerateKeyIvResponse>(
                $"api/crypto/generateKeyIV?methodName={selectedAlgorithm}"
            );

            key = response.key;
            iv = response.iv;

        } catch (Exception ex)
        {
            // Handle exception (e.g., log it, show a message to the user)
            Console.WriteLine($"Error generating key and IV: {ex.Message}");
        }
    }

    // 3) Encrypt the plainText using the selected method, key, and IV
    private async Task EncryptText()
    {
        try{
            var requestBody = new EncryptRequest
                {
                    MethodName = selectedAlgorithm,
                    Key = key,
                    IV = iv,
                    PlainText = plainText
                };

            // Calls POST /api/crypto/encrypt
            var response = await Http.PostAsJsonAsync("api/crypto/encrypt", requestBody);
            var encryptResult = await response.Content.ReadFromJsonAsync<EncryptResponse>();

            cipherText = encryptResult.cipherText;
            encryptionTimeMs = encryptResult.elapsedTimeMs.ToString();
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., log it, show a message to the user)
            Console.WriteLine($"Error encrypting text: {ex.Message}");
        }
    }

    // 4) Decrypt the cipherText using the selected method, key, and IV
    private async Task DecryptText()
    {
        try{
            var requestBody = new DecryptRequest
                {
                    MethodName = selectedAlgorithm,
                    Key = key,
                    IV = iv,
                    CipherText = cipherText
                };

            // Calls POST /api/crypto/decrypt
            var response = await Http.PostAsJsonAsync("api/crypto/decrypt", requestBody);
            var decryptResult = await response.Content.ReadFromJsonAsync<DecryptResponse>();

            decryptedPlainText = decryptResult.plainText;
            decryptionTimeMs = decryptResult.elapsedTimeMs.ToString();
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., log it, show a message to the user)
            Console.WriteLine($"Error decrypting text: {ex.Message}");
        }
    }

    // Classes matching your controller’s request/response models
    private class GenerateKeyIvResponse
    {
        public string key { get; set; }
        public string iv { get; set; }
    }

    private class EncryptRequest
    {
        public string MethodName { get; set; }
        public string Key { get; set; }
        public string IV { get; set; }
        public string PlainText { get; set; }
    }

    private class EncryptResponse
    {
        public string cipherText { get; set; }
        public long elapsedTimeMs { get; set; }
    }

    private class DecryptRequest
    {
        public string MethodName { get; set; }
        public string Key { get; set; }
        public string IV { get; set; }
        public string CipherText { get; set; }
    }

    private class DecryptResponse
    {
        public string plainText { get; set; }
        public long elapsedTimeMs { get; set; }
    }
}

<div class="container">
    <div class="row">

        <!-- Left column -->
        <div class="col-md-4 border p-3">
            <div class="encryption-form p-4 bg-gray-100 rounded-lg shadow-lg">
                <label class="block text-lg mb-2">Choose Algorithm:</label>
                <select @bind="selectedAlgorithm" class="form-select p-2 rounded-md mb-4 w-full">
                    @foreach (var algorithm in algorithms)
                    {
                        <option>@algorithm</option>
                    }
                </select>
                <div><button class="btn btn-primary me-2 mb-2" @onclick="GenerateKeyAndIV">Generate Key and IV</button></div>
                <div class="form-group mb-2">
                    <label for="Key">Key</label>
                    <input type="text" class="form-control" id="Key" @bind="key" placeholder=" " />
                </div>
                <div class="form-group mb-2">
                    <label for="IV">IV</label>
                    <input type="text" class="form-control" id="IV" @bind="iv" placeholder=" " />
                </div>



                <div class="mt-2">
                    <label>Encryption Time: @encryptionTimeMs</label>
                </div>
                <div class="mt-2">
                    <label>Decryption Time: @decryptionTimeMs</label>
                </div>
                
                
            </div>
        </div>
        <!-- Right column: Encryption/Decryption Sections  -->
        <div class="col-md-8 border p-3">
            
            <!-- ENCRYPTION Section -->
            <h5>ENCRYPTION</h5>
            <div class="mb-3">
                <label for="plainTextInput" class="form-label">PlainText (Input):</label>
                <textarea id="plainTextInput" class="form-control" rows="3" @bind="plainText" placeholder="Type text to encrypt..."></textarea>
            </div>

            <div class="mb-3">
                <button class="btn btn-success me-2 " @onclick="EncryptText">Encrypt</button>
                <button class="btn btn-info">Get Encrypt Time</button>
            </div>

            <div class="mb-3">
                <label for="cipherTextOutput" class="form-label">CipherText (Output, hex/base64):</label>
                <textarea id="cipherTextOutput" class="form-control" rows="2" @bind="cipherText" placeholder="Encrypted text will appear here..."></textarea>
            </div>

            <hr />

            <!-- DECRYPTION Section -->
            <h5>DECRYPTION</h5>
            <div class="mb-3">
                <label for="cipherTextInput" class="form-label">CipherText (Input, hex/base64):</label>
                <textarea id="cipherTextInput" class="form-control" rows="3" placeholder="Paste ciphertext to decrypt..."></textarea>
            </div>

            <div class="mb-3">
                <button class="btn btn-danger me-2" @onclick="DecryptText">Decrypt</button>
                <button class="btn btn-warning">Get Decrypt Time</button>
            </div>

            <div class="mb-3">
                <label for="plainTextOutput" class="form-label">PlainText (Output):</label>
                <textarea id="plainTextOutput" class="form-control" rows="2" @bind="decryptedPlainText" placeholder="Decrypted text will appear here..."></textarea>
            </div>

        </div>
    </div>
</div>

<style>
    .form-input, .form-select, .form-textarea {
        border: 1px solid #ccc;
        margin-bottom: 0.5rem;
    }
    .btn:hover {
        opacity: 0.9;
    }
</style>
